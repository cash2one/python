#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/1/19 17:52
# Project:gome_spider
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time
import urllib

# config_text
# when start a spider,you should modify the next config text first

db_name = ''  # database name for store data , string
table_name = ''  # table name for store data , string
table_title = ',crawl_time'  # table title for store data , should be string separated by ','
url_start = 'http://list.gome.com.cn/'  # start url for crawl,string
# connect string , usually no need to modify
connect_dict = {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)


# if create table for store result in mysql , no need to be changed
# if not db_server.isTableExist():
#     db_server.createTable(tableTitle=table_title.split(','))


class Handler(BaseHandler):
    crawl_config = {
    }

    @every(minutes=24 * 60)
    def on_start(self):
        self.crawl(url_start, callback=self.step_first)

    @config(age=2 * 24 * 60 * 60)
    def step_first(self, response):
        d = response.doc
        for t in d('.in>a').items():
            self.crawl(t.attr.href, callback=self.step_second)

    def step_second(self, response):
        d = response.doc
        for t in d('.product-item .item-name a').items():
            self.crawl(t.attr.href, callback=self.my_result)
        p_t = d('#mp-currentNumber').attr('data-totalpagenum')
        p_n = d('#mp-currentNumber').text()
        print p_t, p_n
        if p_t and p_t:
            try:
                if int(p_n) < int(p_t):
                    # build request url for page turning
                    url_s = 'http://list.gome.com.cn/cloud/asynSearch?callback=' \
                            'callback_product&module=product&from=category&page='
                    url_m = '&paramJson='
                    params = d('#searchReq').text()[1:-1]
                    url_e = '{' + urllib.quote(params).replace(urllib.quote(' '), '+') + '}'
                    timestamp = "&_=" + '%d' % (time.time() * 1000)
                    url = url_s + p_n + url_m + url_e + timestamp
                    print url
                    self.crawl(url, callback=self.step_second)  # this action will return a json file
            except ValueError, e:
                print e.message

    @config(priority=2)
    def my_result(self, response):
        d = response.doc
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        return []

        # over ride method for result store to mysql
        # def on_result(self, result):
        #     if result:
        #         db_server.data2DB(data=result)
        #     else:
        #         print u'result-->return None'
