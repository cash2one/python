#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/2/18 18:45
# Project:yhd_relation_spider
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time

# config_text
# when start a spider,you should modify the next config text first

db_name = 'platform_data'  # database name for store data , string
table_name = 'dangdang_relation'  # table name for store data , string
table_title = 'url,relation,crawl_time'  # table title for store data , should be string separated by ','
url_start = ''  # start url for crawl,string
# connect string , usually no need to modify
connect_dict = {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)
# if create table for store result in mysql , no need to be changed
if not db_server.isTableExist():
    db_server.createTable(tableTitle=table_title.split(','))


def gen_url():
    db_server_t = DBService(dbName=db_name, tableName='dangdang', **connect_dict)
    shop_hrefs_t = db_server_t.getData(var='shop_href')
    shop_hrefs = filter(lambda x: 1 if x else 0,
                        map(lambda x: x.split('.html')[0] if x else 0,
                            set([item[0] for item in shop_hrefs_t])
                            )
                        )
    return map(lambda x: x + '/relation.html', shop_hrefs)


class Handler(BaseHandler):
    crawl_config = {
        'proxy': '10.10.10.10:80',
        'headers': {
            'User-Agent': 'User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'
        }
    }

    @every(minutes=24 * 60)
    @config(age=365 * 24 * 60 * 60)
    def on_start(self):
        self.crawl(gen_url(), callback=self.my_result, retries=100)

    @config(priority=2)
    def my_result(self, response):
        d = response.doc
        url = response.url
        text = d('.contact>p').text()
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        return [
            url.split('/relation.html')[0],
            text,
            crawl_time
        ]

    # over ride method for result store to mysql
    def on_result(self, result):
        if result:
            db_server.data2DB(data=result)
        else:
            print u'result-->return None'
