#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/1/25 16:25
# Project:ps_xicidaili
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time
import re
from pyquery.pyquery import PyQuery as pq

# config_text
# when start a spider,you should modify the next config text first

db_name = 'b2c_base'  # database name for store data , string
table_name = 'proxy_xi_ci_dai_li'  # table name for store data , string
table_title = 'proxy_port,crawl_time'  # table title for store data , should be string separated by ','
url_start = 'http://www.xicidaili.com/nn/1'  # start url for crawl,string
# connect string , usually no need to modify
connect_dict = {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)
# if create table for store result in mysql , no need to be changed
if not db_server.isTableExist():
    db_server.createTable(tableTitle=table_title.split(','))

ip_patt = re.compile(r'(?<![\.\d])(?:\d{1,3}\.){3}\d{1,3}(?![\.\d]):\d{1,5}')


class Handler(BaseHandler):
    crawl_config = {
    }

    @every(minutes=0.5 * 24 * 60)
    def on_start(self):
        self.crawl(url_start, callback=self.step_first, fetch_type='js',
                   js_script="""function(){windows.scrollTo(0,document.body.scrollHeight);}""")

    @config(age=2 * 24 * 60 * 60)
    def step_first(self, response):
        d = response.doc
        self.my_result(response)
        for t in d('.pagination>a').items():
            self.crawl(t.attr.href, callback=self.step_first)

    def my_result(self, response):
        t = response.text
        txt = pq(t).text()
        res = ':'.join(txt.split(' '))
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        return map(lambda x: [x, crawl_time], re.findall(ip_patt, res))

    # over ride method for result store to mysql
    def on_result(self, result):
        if result:
            db_server.data2DB(data=result)
        else:
            print u'result-->return None'
