#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/1/19 14:00
# Project:j1_base_spider
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time

# config_text
# when start a spider,you should modify the next config text first

db_name = 'industry_data__medicine_health'
table_name = 'j1_base'
table_title = 'catalogue,product_name,product_href,price,sold,comment_count,crawl_time'
url_start = 'http://www.j1.com/sitemap.html'
# connect string , usually no need to modify
connect_dict = {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)
if not db_server.isTableExist():
    db_server.createTable(tableTitle=table_title.split(','))


class Handler(BaseHandler):
    crawl_config = {
    }

    @every(minutes=24 * 60)
    def on_start(self):
        self.crawl(url_start, callback=self.step_first)

    @config(age=10 * 24 * 60 * 60)
    def step_first(self, response):
        d = response.doc
        T = d('#paginationDivId>span>a').items()
        for t in d('.right a').items():
            self.crawl(t.attr.href, callback=self.my_result)
        if T:
            for t in T:
                self.crawl(t.attr.href, callback=self.step_first)

    @config(priority=2)
    def my_result(self, response):
        d = response.doc
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        datalogue = d('.detailnav').text()
        return [
            [
                datalogue.replace(u'健一网首页 > ', ''),
                t('.listsearch-mc a').text(),  # product name
                t('.listsearch-mc a').attr('href'),  # product href
                t('.listsearch-price span').text().replace(u'¥', ''),  # price
                t('.listsearch-des>span').text().replace(u'总销量：', ''),  # sold
                t('.listsearch-des>a').text().replace(u'条评论', ''),  # comment count
                crawl_time
            ] for t in d('.listsearch-one').items()
            ]

    # over ride method for result store to mysql
    def on_result(self, result):
        if result:
            db_server.data2DB(data=result)
        else:
            print u'result-->return None'
