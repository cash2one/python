#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/2/22 10:13
# Project:jd_base
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time
import json

# config_text
# when start a spider,you should modify the next config text first

db_name = 'platform_data'  # database name for store data , string
table_name = 'jd_base'  # table name for store data , string
table_title = 'category,detail,crawl_time'  # table title for store data , should be string separated by ','
url_start = 'http://www.jd.com/allSort.aspx'  # start url for crawl,string
# connect string , usually no need to modify
connect_dict = {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)
# if create table for store result in mysql , no need to be changed
if not db_server.isTableExist():
    db_server.createTable(tableTitle=table_title.split(','))


class Handler(BaseHandler):
    crawl_config = {
        'proxy': '10.10.10.10:80',
        'headers': {
            'User-Agent': 'User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'
        }
    }

    @every(minutes=24 * 60)
    def on_start(self):
        self.crawl(url_start, callback=self.step_first,retries=100)

    @config(age=2 * 24 * 60 * 60)
    def step_first(self, response):
        d = response.doc
        for t in d('.clearfix>dd>a').items():
            self.crawl(t.attr.href, callback=self.step_second, save={'cate': t.text()},retries=100)

    def step_second(self, response):
        d = response.doc
        s = response.save
        self.on_result(self.my_result(response))
        for t in d('.p-num>a').items():
            self.crawl(t.attr.href, callback=self.step_second, save=s,retries=100)

    @config(priority=2)
    def my_result(self, response):
        d = response.doc
        cate = response.save['cate']
        res = {}
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        res['crawl_url'] = response.url
        i = 1
        for t in d('.gl-i-wrap.j-sku-item').items():
            temp = {
                'title': t('.p-name em').text(),
                'href': t('.p-name a').attr('href'),
                # 'shop_name': t('.p-shop a').attr('title'),
                # 'shop_href': t('.p-shop a').attr('href'),
                'venderid': t.attr('venderid'),
                'shopid': t.attr('jdzy_shop_id'),
                'comment_count': t('.p-commit a').text(),
                'sku': t.attr('data-sku')
            }
            res[i] = temp
            i += 1
        return [cate, json.dumps(res), crawl_time]

    # over ride method for result store to mysql
    def on_result(self, result):
        if result:
            db_server.data2DB(data=result)
        else:
            print u'result-->return None'
