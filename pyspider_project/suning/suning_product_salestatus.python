#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/2/24 18:00
# Project:suning_product_salestatus
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time
from Queue import Queue
import re

# save message from suning_product_detail
queue_passPartNumber = Queue(0)

# config_text
db_name = 'platform_data'
table_name = 'suning_product_salestatus'
table_title = 'original_url,sale_status,crawl_time'
connect_dict = \
    {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)
# if create table for store result in mysql , no need to be changed
if not db_server.isTableExist():
    db_server.createTable(tableTitle=table_title.split(','))

# re compiler
pat_salestatus = re.compile('showSaleStatus\((.+)\);', re.DOTALL)
pat_vendor = re.compile('"vendor":"(.+?)",')


class Handler(BaseHandler):
    crawl_config = {
        'proxy': '10.10.10.10:80',
        'headers': {
            'User-Agent': 'User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) '
                          'Gecko/20100101 Firefox/4.0.1'
        }
    }

    @every(minutes=24 * 60)
    def on_start(self):
        while True:
            if not queue_passPartNumber.qsize():
                time.sleep(5)
                continue
            else:
                template = queue_passPartNumber.get()
            passPartNumber = template['passPartNumber']
            original_url = template['original_url']
            url_t = 'http://icps.suning.com/icps-web/getAllPriceFourPage/' + passPartNumber + \
                    '__755_7550101_1_pc_showSaleStatus.vhtm'
            self.crawl(url_t, callback=self.my_result, retries=100,
                       save={'original_url': original_url})

    @config(priority=2)
    def my_result(self, response):
        text = response.text
        original_url = response.save['original_url']
        sale_status = re.findall(pat_salestatus, text)[0]
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        vendor_id = re.findall(pat_vendor, text)[0]
        self.send_message('suning_product_vendorInfo', {
            'vendor_id': vendor_id,
            'original_url': original_url
        }, url="%s#%s" % ('distinc', vendor_id))
        return [
            original_url,
            sale_status,
            crawl_time
        ]

    # over ride method for result store to mysql
    def on_result(self, result):
        if result:
            db_server.data2DB(data=result)
        else:
            print u'result-->return None'

    # overide method for store message
    def on_message(self, project, msg):
        queue_passPartNumber.put(msg)
