#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on:2016/2/24 13:43
# Project:suning_product_detail
# Author:yangmingsong

from pyspider.libs.base_handler import *
from ms_spider_fw.DBSerivce import DBService
import time
import re
import json

# config_text
db_name = 'platform_data'
table_name = 'suning_product_detail'
table_title = 'url,detail,crawl_time'
url_start = 'http://www.suning.com/emall/pgv_10052_10051_1_.html'
# connect string , usually no need to modify
connect_dict = \
    {'host': '10.118.187.12', 'user': 'admin', 'passwd': 'admin', 'charset': 'utf8'}

# now,the next is spider script
db_server = DBService(dbName=db_name, tableName=table_name, **connect_dict)
if not db_server.isTableExist():
    db_server.createTable(tableTitle=table_title.split(','))

pat_passPartNumber = re.compile('partNumber":"(\d+?)\",')
pat_extract_salestaus = re.compile('showSaleStatus\((.+)\);', re.DOTALL)

# re compiler
pat_src = re.compile('src-large="(.+?)"')
pat_parameters = re.compile('name-inner.*?span>(.+?)<.+?"val">(.+?)</td>', re.DOTALL)


class Handler(BaseHandler):
    maeeage_other = []
    crawl_config = {
        'proxy': '10.10.10.10:80',
        'headers': {
            'User-Agent': 'User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) '
                          'Gecko/20100101 Firefox/4.0.1'
        }
    }

    @every(minutes=24 * 60)
    def on_start(self):
        self.crawl(url_start, callback=self.step_first, proxy=False, retries=10)

    @config(age=2 * 24 * 60 * 60)
    def step_first(self, response):
        d = response.doc
        for t in d('.listLeft dd a').items():
            id_t = t.attr('id')
            cate = {'category_name': t.text(), 'category_id': id_t}
            url = 'http://list.suning.com/emall/showProductList.do?ci=' + id_t + \
                  '&pg=03&cp=0&il=0&iy=0&n=1&cityId=9051'
            self.crawl(url, callback=self.step_second, save=cate, retries=100)

    @config(age=5 * 24 * 60 * 60)
    def step_second(self, response):
        d = response.doc
        page_sum = int(d('#pageLast').text())
        id_t = response.save['category_id']
        url_s = 'http://list.suning.com/emall/showProductList.do?ci='
        url_m = '&pg=03&cp='
        url_e = '&il=0&iy=0&n=1&cityId=9051'
        urls = map(lambda x: url_s + id_t + url_m + str(x) + url_e, range(page_sum))
        for url in urls:
            self.crawl(url, callback=self.step_third, save=response.save, retries=100)

    @config(age=15 * 24 * 60 * 60)
    def step_third(self, response):
        d = response.doc
        urls = [t('.i-name .sellPoint').attr('href') for t in d('.wrap').items()]
        for url in urls:
            self.crawl(url, callback=self.my_result, retries=100)

    @config(priority=2)
    def my_result(self, response):
        d = response.doc
        url = response.url
        txt = response.text
        passPartNumber = re.findall(pat_passPartNumber, txt)[0]
        # send message to suning_product_salestatus project
        self.send_message('suning_product_salestatus', {
            "passPartNumber": passPartNumber,
            "original_url": url
        }, url="%s#%s" % ('distinc', passPartNumber))

        temp = list(set(re.findall(pat_src, txt)))
        src_href = dict(zip(range(len(temp)), temp))
        # noinspection PyTypeChecker
        detail = {
            'product_title': d('#productDisplayName').text(),
            'src_href': src_href,
            'product_parameters': dict(re.findall(pat_parameters, txt)),
            'message': {
                "passPartNumber": passPartNumber,
                "original_url": url
            }
        }
        crawl_time = time.strftime('%Y-%m-%d %X', time.localtime())
        return [
            url,
            json.dumps(detail),
            crawl_time
        ]

    # over ride method for result store to mysql
    def on_result(self, result):
        if result:
            db_server.data2DB(data=result)
        else:
            print u'result-->return None'
